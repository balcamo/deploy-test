{"version":3,"sources":["componets/nav.js","componets/Home.js","componets/AddService.js","componets/WellServices.js","shared/baseUrl.js","redux/ActionCreators.js","redux/ActionTypes.js","componets/AddEquipment.js","componets/WellEquipment.js","componets/LoadingComponent.js","componets/WellTabs.js","componets/Booster.js","componets/Main.js","redux/forms.js","redux/equipment.js","redux/locations.js","redux/services.js","App.js","redux/configureStore.js","serviceWorker.js","AuthConfig.js","index.js"],"names":["NavNav","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","dropdownOpen","setState","react_default","a","createElement","reactstrap_es","pills","href","className","nav","isOpen","caret","divider","Component","Home","AddService","handleBlur","field","touched","objectSpread","defineProperty","equipName","equipmentId","equipId","locationId","serviceName","serviceDate","nextDate","personName","notes","modal","handleInputChange","handleSubmit","prevState","event","target","value","name","values","console","log","JSON","stringify","alert","_this2","type","onClick","lib","onSubmit","htmlFor","md","select","model","id","placeholder","validators","show","messages","text","textarea","color","Service","services","addService","date","componets_AddService","previous","map","service","Fragment","key","size","baseUrl","locationsLoading","locationsFailed","errmess","payload","addLocations","dishes","equipmentLoading","equipmentFailed","addEquipment","equipment","postEquipment","wellHouse","installDate","horsePower","oilType","serial","greaseType","dispatch","newEquipment","fetch","method","body","headers","Content-Type","credentials","then","response","ok","error","Error","status","statusText","json","catch","message","serviceLoading","serviceFailed","AddEquipment","_touched","locationName","input","withRouter","connect","RenderPropertiesList","properties","listofEquip","equip","filter","parseInt","build","title","WellEquipment_RenderPropertiesList","bordered","striped","hover","scope","WellServices","componets_AddEquipment","Loading","EquipmentRender","isLoading","LoadingComponent_Loading","errMess","length","componets_WellEquipment","WellTabs","_useState","useState","tab","_useState2","slicedToArray","activeTab","setTab","locations","react_router_dom","to","active","tabs","classnames","tabId","atomic","String","equipmentisLoading","equipmentErrMess","servicesLoading","servicesisLoading","servicesErrMess","Booster","Booster_EquipmentRender","Main","fetchLocations","fetchEquipment","fetchService","light","react_router","path","component","_ref","match","componets_WellTabs","location","params","_ref2","componets_Booster","render","postService","dishId","rating","author","comment","newService","Date","toISOString","promos","InitialNewEquip","InitialNewService","Equipment","arguments","undefined","action","Locations","Services","store","createStore","combineReducers","createForms","newEquip","applyMiddleware","thunk","logger","App","es","componets_Main","Boolean","window","hostname","adalConfig","tenant","clientId","endpoints","api","apiUrl","cacheLocation","authContext","AuthenticationContext","withAdalLogin","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df3d03a3.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { NavItem, Dropdown, DropdownItem, DropdownToggle, \r\n    DropdownMenu, Nav, NavLink } from 'reactstrap';\r\n\r\nclass NavNav extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n          dropdownOpen: false\r\n        };\r\n      }\r\n    \r\n    toggle() {\r\n        this.setState({\r\n            dropdownOpen: !this.state.dropdownOpen\r\n        });\r\n    }\r\n    render(){\r\n\r\n        return(\r\n            <div>\r\n                <Nav pills>\r\n                    <NavItem>\r\n                        <NavLink href=\"/\"><span className=\"fa fa-home fa-lg\"></span> Home </NavLink>\r\n                    </NavItem>\r\n                    <Dropdown nav isOpen={this.state.dropdownOpen} toggle={this.toggle}>\r\n                        <DropdownToggle nav caret>\r\n                            <span className=\"fa fa-suitcase fa-lg\"></span> \r\n                            Equipment \r\n                            <b className=\"caret\"></b>\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem href=\"/well/1\">Well 1</DropdownItem>\r\n                            <DropdownItem href=\"/well/2\">Well 2</DropdownItem>\r\n                            <DropdownItem href=\"/well/3\">Well 3</DropdownItem>\r\n                            <DropdownItem href=\"/well/4\">Well 4</DropdownItem>\r\n                            <DropdownItem href=\"/well/5\">Well 5</DropdownItem>\r\n                            <DropdownItem href=\"/well/6\">well 6</DropdownItem>\r\n                            <DropdownItem href=\"/well/7\">Well 7</DropdownItem>\r\n                            <DropdownItem href=\"/well/8\">Well 8</DropdownItem> \r\n                            <DropdownItem href=\"/well/9\">Well 9</DropdownItem> \r\n                            <DropdownItem divider />\r\n                            <DropdownItem href=\"/booster/10\">Booster 1</DropdownItem>\r\n                            <DropdownItem href=\"/booster/11\">Booster 2</DropdownItem>\r\n                            <DropdownItem>Booster 3</DropdownItem>\r\n                            <DropdownItem>Booster 4</DropdownItem>\r\n                            <DropdownItem>Booster 5</DropdownItem>\r\n                            <DropdownItem divider />\r\n                            <DropdownItem>Reservior 1</DropdownItem>\r\n                            <DropdownItem>Reservior 2</DropdownItem>\r\n                            <DropdownItem>Reservior 3</DropdownItem>\r\n                            <DropdownItem>Reservior 4</DropdownItem>\r\n                            <DropdownItem>Reservior 5</DropdownItem> \r\n            \r\n                        </DropdownMenu>\r\n                    </Dropdown>\r\n                    \r\n                    <NavItem >\r\n                        <NavLink href=\"#\"><span className=\"fa fa-map-o fa-lg\"></span> Maps</NavLink>\r\n                    </NavItem>\r\n                    <NavItem >\r\n                        <NavLink href=\"#\"><span className=\"fa fa-address-card fa-lg\"></span> ???</NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\nexport default  NavNav;","import React from 'react';\r\n\r\nfunction Home(){\r\n    return(\r\n        <div>\r\n             <h1>This is going to be the maintenance log!</h1>\r\n        </div>\r\n    );\r\n}\r\nexport default Home;","import React, {Component} from 'react';\r\nimport { Control, Errors, LocalForm } from 'react-redux-form';\r\n\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, \r\n     Row, Col, Label   } from 'reactstrap';\r\n\r\n\r\nclass AddService extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            equipName:props.equipName,\r\n            equipmentId:props.equipId,\r\n            locationId:props.locationId,\r\n            serviceName:props.serviceName,\r\n            serviceDate:'',\r\n            nextDate:'',\r\n            personName:'',\r\n            notes:'',\r\n            modal: false,\r\n            touched: {\r\n                serviceName: false,\r\n                serviceDate: false,\r\n                nextDate: false,\r\n                personName: false,\r\n                notes: false\r\n            }\r\n        };\r\n    \r\n        this.toggle = this.toggle.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n      }\r\n      handleBlur = (field) => () => {\r\n        this.setState({\r\n          touched: { ...this.state.touched, [field]: true },\r\n        });\r\n    }\r\n      toggle() {\r\n        this.setState(prevState => ({\r\n          modal: !prevState.modal\r\n        }));\r\n      }\r\n      handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n          [name]: value\r\n        });\r\n    }\r\n      handleSubmit(values){\r\n        this.toggle();\r\n        console.log('Current State is: ' + JSON.stringify(values));\r\n        \r\n        alert(\"form submitting\");\r\n      }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Button type=\"button\" onClick={this.toggle} className=\"btn btn-secondary\">Add Service</Button>\r\n                {/* Modal to edit equip details */}\r\n                <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n                    <ModalHeader toggle={this.toggle}>Add a Service for {this.state.equipName}</ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"serviceName\" md={2}>Service Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.select model=\".serviceName\" id=\"serviceName\" name=\"serviceName\"\r\n                                        placeholder={this.state.serviceName}\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                        }}\r\n                                        >\r\n                                        <option> --- Select One --- </option>\r\n                                        <option>Oil Change</option>\r\n                                        <option>Grease </option>\r\n                                    </Control.select>\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".serviceName\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            \r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"serviceDate\" md={2}>Service Date</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".serviceDate\" id=\"serviceDate\" name=\"serviceDate\"\r\n                                        type=\"datetime-local\"\r\n                                        value={this.state.serviceDate}\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                        }}\r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".serviceDate\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            \r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"nextDate\" md={2}>next date for this Service</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".nextDate\" id=\"nextDate\" name=\"nextDate\"\r\n                                        type=\"datetime-local\"\r\n                                        value={this.state.nextDate}\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                        }}\r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".nextDate\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            \r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"personName\" md={2}>Person Who performed Service</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".personName\" id=\"personName\" name=\"serial\"\r\n                                        placeholder={this.state.personName}\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                        }}\r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".personName\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            \r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"notes\" md={2}>Notes</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".notes\" id=\"notes\" name=\"notes\"\r\n                                        placeholder={this.state.notes}\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                        }}\r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".notes\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            \r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" type=\"submit\" >Save</Button>{' '}\r\n                        <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            \r\n            </div>   \r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default AddService;","import React, {Component} from 'react';\r\n\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, \r\n    ListGroup, ListGroupItem } from 'reactstrap';\r\n\r\nimport AddService from './AddService';\r\n\r\n\r\nclass Service extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            services:props.services,\r\n            equipName:props.equipName,\r\n            equipId:props.equipId,\r\n            locationId:props.locationId,\r\n            modal: false,\r\n            \r\n        };\r\n    \r\n    this.toggle = this.toggle.bind(this);\r\n    this.addService = this.addService.bind(this);\r\n    }\r\n    \r\n    toggle() {\r\n        this.setState(prevState => ({\r\n        modal: !prevState.modal\r\n        }));\r\n    }\r\n\r\n    addService(date){\r\n        this.toggle();\r\n        alert(\"form submitting\");\r\n\r\n    \r\n        return(\r\n            <AddService equipName={this.state.equipName} equipId={this.state.equipId} locationId={this.state.locationId} previous={date}/>\r\n        );\r\n    \r\n    // this.props.postEquipment(this.props.id,this.props.locationId,\r\n    //     this.props.wellHouse,this.state.name, values.installDate, \r\n    //     values.horsePower, values.oilType, values.serial, values.greaseType);\r\n  }\r\n  \r\n  \r\n    render(){\r\n        const services = this.state.services.map((service)=>{\r\n            return(\r\n                <React.Fragment key={service.id}>\r\n                    <tr>\r\n                        <th><Button type=\"button\" size=\"sm\" onClick={this.toggle}>{service.serviceName}</Button></th>\r\n                        <td>{service.personName}</td>\r\n                        <td>{service.serviceDate}</td>\r\n                        <td>{service.nextDate}</td>\r\n                        <td>{service.notes}</td>\r\n                    </tr>\r\n                    {/* Modal to edit equip details */}\r\n                    <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n                        <ModalHeader toggle={this.toggle}>{service.serviceName}'s details</ModalHeader>\r\n                        <ModalBody>\r\n                            <ListGroup>\r\n                                <ListGroupItem><b>Who did the Work:</b> {service.personName}</ListGroupItem>\r\n                                <ListGroupItem><b>Date of Service:</b> {service.serviceDate}</ListGroupItem>\r\n                                <ListGroupItem><b>Next Service Date:</b> {service.nextDate}</ListGroupItem>\r\n                                <ListGroupItem><b>Notes:</b> {service.notes}</ListGroupItem>\r\n                            </ListGroup>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            \r\n                            <AddService equipName={this.state.equipName} equipId={this.state.equipId} \r\n                                locationId={this.state.locationId} previous={service.serviceDate} serviceName={service.serviceName}/>\r\n                            <Button color=\"secondary\" onClick={this.toggle}>Close</Button>\r\n                        </ModalFooter>\r\n                    </Modal>\r\n                </React.Fragment>\r\n            );}\r\n        );\r\n        return(\r\n            <React.Fragment>\r\n                <tbody>\r\n                    {services}\r\n                </tbody>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default Service;\r\n","//export const baseUrl = 'http://10.242.14.36:3002/';\r\nexport const baseUrl = 'http://10.18.147.207:3002/';\r\n","import * as ActionTypes from './ActionTypes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n\r\nexport const fetchLocations = () => (dispatch) => {\r\n    \r\n    dispatch(locationsLoading());\r\n\r\n    return fetch(baseUrl + 'locations')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(locations => dispatch(addLocations(locations)))\r\n    .catch(error => dispatch(locationsFailed(error.message)));\r\n}\r\n\r\n\r\nexport const locationsLoading = () => ({\r\n    type: ActionTypes.LOCATIONS_LOADING\r\n});\r\n\r\nexport const locationsFailed = (errmess) => ({\r\n    type: ActionTypes.LOCATIONS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addLocations = (dishes) => ({\r\n    type: ActionTypes.ADD_LOCATIONS,\r\n    payload: dishes\r\n});\r\n\r\nexport const fetchEquipment = () => (dispatch) => {\r\n    \r\n    dispatch(equipmentLoading());\r\n\r\n    return fetch(baseUrl + 'equipment')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(equipment => dispatch(addEquipment(equipment)))\r\n    .catch(error => dispatch(equipmentFailed(error.message)));\r\n}\r\n\r\n\r\nexport const equipmentLoading = () => ({\r\n    type: ActionTypes.EQUIPMENT_LOADING\r\n});\r\n\r\nexport const equipmentFailed = (errmess) => ({\r\n    type: ActionTypes.EQUIPMENT_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addEquipment = (equipment) => ({\r\n    type: ActionTypes.ADD_EQUIPMENT,\r\n    payload: equipment\r\n});\r\n\r\nexport const postEquipment = (id,locationId,wellHouse,name,installDate,horsePower,oilType,serial,greaseType) => (dispatch) => {\r\n\r\n    const newEquipment = {\r\n        id:id,\r\n        locationId:locationId,\r\n        wellHouse:wellHouse,\r\n        name: name,\r\n        installDate: installDate,\r\n        horsePower: horsePower,\r\n        oilType: oilType,\r\n        serial:serial,\r\n        greaseType:greaseType\r\n    };\r\n    \r\n    return fetch(baseUrl + 'equipment', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newEquipment),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => dispatch(addEquipment(response)))\r\n    .catch(error =>  { console.log('post equipment', error.message);\r\n      alert('Your equipment could not be posted\\nError: '+error.message); });\r\n};\r\n\r\nexport const fetchService = () => (dispatch) => {\r\n    \r\n    dispatch(serviceLoading());\r\n\r\n    return fetch(baseUrl + 'service')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(promos => dispatch(addService(promos)))\r\n    .catch(error => dispatch(serviceFailed(error.message)));\r\n}\r\n\r\n\r\nexport const serviceLoading = () => ({\r\n    type: ActionTypes.SERVICE_LOADING\r\n});\r\n\r\nexport const serviceFailed = (errmess) => ({\r\n    type: ActionTypes.SERVICE_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addService = (services) => ({\r\n    type: ActionTypes.ADD_SERVICE,\r\n    payload: services\r\n});\r\n\r\nexport const postService = (dishId, rating, author, comment) => (dispatch) => {\r\n\r\n    const newService = {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    };\r\n    newService.date = new Date().toISOString();\r\n    \r\n    return fetch(baseUrl + 'comments', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newService),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => dispatch(addService(response)))\r\n    .catch(error =>  { console.log('post service', error.message);\r\n      alert('Your service could not be posted\\nError: '+error.message); });\r\n};","export const LOCATIONS_LOADING = 'LOCATIONS_LOADING';\r\nexport const LOCATIONS_FAILED = 'LOCATIONS_FAILED';\r\nexport const ADD_LOCATIONS = 'ADD_LOCATIONS';\r\n\r\nexport const EQUIPMENT_LOADING = 'EQUIPMENT_LOADING';\r\nexport const EQUIPMENT_FAILED = 'EQUIPMENT_FAILED';\r\nexport const ADD_EQUIPMENT = 'ADD_EQUIPMENT';\r\n\r\nexport const ADD_SERVICE = 'ADD_SERVICE';\r\nexport const SERVICE_LOADING = 'SERVICE_LOADING';\r\nexport const SERVICE_FAILED = 'SERVICE_FAILED';","import React, {Component} from 'react';\r\nimport { Control, Errors, LocalForm } from 'react-redux-form';\r\nimport { postEquipment } from '../redux/ActionCreators';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, \r\n     Row, Col, Label   } from 'reactstrap';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    \r\n}}\r\nconst mapDispatchToProps = dispatch => ({\r\n    postEquipment: (id,locationId,wellHouse,name,installDate,horsePower,\r\n        oilType,serial,greaseType) => dispatch(postEquipment(id,\r\n            locationId,wellHouse,name,installDate,horsePower,\r\n            oilType,serial,greaseType)),\r\n});\r\nclass AddEquipment extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name:'',\r\n            installDate:'',\r\n            horsePower:'',\r\n            oilType:'',\r\n            serial:'',\r\n            greaseType:'',\r\n            modal: false,\r\n            touched: {\r\n                installDate: false,\r\n                installDate: false,\r\n                horsePower: false,\r\n                oilType: false,\r\n                serial: false,\r\n                greaseType: false\r\n            }\r\n        };\r\n    \r\n        this.toggle = this.toggle.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n      }\r\n      handleBlur = (field) => () => {\r\n        this.setState({\r\n          touched: { ...this.state.touched, [field]: true },\r\n        });\r\n    }\r\n      toggle() {\r\n        this.setState(prevState => ({\r\n          modal: !prevState.modal\r\n        }));\r\n      }\r\n      handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n          [name]: value\r\n        });\r\n    }\r\n      handleSubmit(values){\r\n        this.toggle();\r\n        console.log('Current State is: ' + JSON.stringify(values));\r\n        \r\n        alert(\"form submitting\");\r\n      }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Button type=\"button\" onClick={this.toggle} className=\"btn btn-secondary\">Add Equipment</Button>\r\n                {/* Modal to edit equip details */}\r\n                <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n                    <ModalHeader toggle={this.toggle}>Add new peice of equipment for {this.props.locationName}</ModalHeader>\r\n                    <ModalBody>\r\n                    <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"installDate\" md={2}>Install Date</Label>\r\n                                <Col md={10}>\r\n                                    <Control.input model=\".installDate\" id=\"installDate\" name=\"installDate\"\r\n                                        type=\"datetime-local\"\r\n                                        value={this.state.installDate}\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                        }}\r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".installDate\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            \r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"horsePower\" md={2}>Horse Power</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".horsePower\" id=\"horsePower\" name=\"horsePower\"\r\n                                        placeholder={this.state.horsePower}\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                        }}\r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".horsePower\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            \r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"oilType\" md={2}>Oil Type</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".oilType\" id=\"oilType\" name=\"oilType\"\r\n                                        placeholder={this.state.oilType}\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                        }}\r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".oilType\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            \r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"serial\" md={2}>Serial Number</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".serial\" id=\"serial\" name=\"serial\"\r\n                                        placeholder={this.state.serial}\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                        }}\r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".serial\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            \r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"greaseType\" md={2}>Grease Type</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".greaseType\" id=\"greaseType\" name=\"greaseType\"\r\n                                        placeholder={this.state.greaseType}\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                        }}\r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".greaseType\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            \r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" type=\"submit\" >Save</Button>{' '}\r\n                        <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            \r\n            </div>   \r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AddEquipment));","import React, {Component} from 'react';\r\nimport { Button, Card, CardBody, CardHeader, Table, \r\n    Modal, ModalHeader, ModalBody, ModalFooter, Row, Col, Label  } from 'reactstrap';\r\nimport { Control, Errors, LocalForm } from 'react-redux-form';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport Service from './WellServices';\r\nimport AddService from './AddService';\r\nimport AddEquipment from './AddEquipment';\r\nimport { postEquipment } from '../redux/ActionCreators';\r\n\r\nimport {  AccordionItem } from 'react-light-accordion';\r\nimport 'react-light-accordion/demo/css/index.css';\r\n//import {Loading} from './LoadingComponent'; \r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n\r\n    }}\r\n\r\n  const mapDispatchToProps = dispatch => ({\r\n    postEquipment: (id,locationId,wellHouse,name,installDate,horsePower,\r\n        oilType,serial,greaseType) => dispatch(postEquipment(id,\r\n            locationId,wellHouse,name,installDate,horsePower,\r\n            oilType,serial,greaseType)),\r\n  });\r\n\r\n\r\nclass RenderPropertiesList extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name:props.properties.name,\r\n            installDate:props.properties.installDate,\r\n            horsePower:props.properties.horsePower,\r\n            oilType:props.properties.oilType,\r\n            serial:props.properties.serial,\r\n            greaseType:props.properties.greaseType,\r\n            modal: false,\r\n            touched: {\r\n                installDate: false,\r\n                installDate: false,\r\n                horsePower: false,\r\n                oilType: false,\r\n                serial: false,\r\n                greaseType: false\r\n            }\r\n        };\r\n    \r\n        this.toggle = this.toggle.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n      }\r\n      handleBlur = (field) => () => {\r\n        this.setState({\r\n          touched: { ...this.state.touched, [field]: true },\r\n        });\r\n    }\r\n      toggle() {\r\n        this.setState(prevState => ({\r\n          modal: !prevState.modal\r\n        }));\r\n      }\r\n      handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n          [name]: value\r\n        });\r\n    }\r\n      handleSubmit(values){\r\n        this.toggle();\r\n        this.props.postEquipment(this.props.id,this.props.locationId,\r\n            this.props.wellHouse,this.state.name, values.installDate, \r\n            values.horsePower, values.oilType, values.serial, values.greaseType);\r\n        alert(\"form submitting\");\r\n      }\r\n    render(){\r\n        if(this.state.name!=null){\r\n            return(\r\n                <React.Fragment>\r\n                    <CardHeader>\r\n                        <div className=\"d-inline-flex\"> \r\n                            <h5><b>Info &nbsp;&nbsp;&nbsp;</b> </h5> \r\n                            <Button type=\"button\" size=\"sm\" onClick={this.toggle}>\r\n                                <i className=\"fa fa-edit \"></i> \r\n                            </Button>\r\n                            {/* Modal to edit equip details */}\r\n                            <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n                                <ModalHeader toggle={this.toggle}>Edit {this.state.name}'s properties</ModalHeader>\r\n                                <ModalBody>\r\n                                    <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                                        <Row className=\"form-group\">\r\n                                            <Label htmlFor=\"installDate\" md={2}>Install Date</Label>\r\n                                            <Col md={10}>\r\n                                                <Control.input model=\".installDate\" id=\"installDate\" name=\"installDate\"\r\n                                                    type=\"datetime-local\"\r\n                                                    value={this.state.installDate}\r\n                                                    className=\"form-control\"\r\n                                                    validators={{\r\n                                                    }}\r\n                                                    />\r\n                                                <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".installDate\"\r\n                                                    show=\"touched\"\r\n                                                    messages={{\r\n                                                        \r\n                                                    }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </LocalForm>\r\n                                </ModalBody>\r\n                                <ModalFooter>\r\n                                    <Button color=\"primary\" type=\"submit\" onClick={(values) => this.handleSubmit(values)}>Save</Button>{' '}\r\n                                    <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\r\n                                </ModalFooter>\r\n                            </Modal>\r\n                        </div>\r\n                        <div className=\"row equipInfo\"> \r\n                            <p><b>Install Date</b>: {this.state.installDate}&nbsp;</p> \r\n                        </div>\r\n                    </CardHeader>\r\n                </React.Fragment>\r\n                        \r\n            );}\r\n        else \r\n            return(<div></div>);\r\n    }\r\n}\r\n\r\nfunction WellEquipment(props){\r\n    const listofEquip = props.equipment.map((equip) => {\r\n        const services = props.services.filter(\r\n            (service) => parseInt(service.equipmentId) === parseInt(equip.id,10)); \r\n        return (\r\n            <div key={equip.id}>\r\n                <AccordionItem title={equip.name}>\r\n                    <Card>\r\n                        <RenderPropertiesList properties={equip} />\r\n                        <CardBody >\r\n                            <Table bordered striped hover >\r\n                                {/*  Table Header */}\r\n                                <thead >\r\n                                    <tr>\r\n                                        <th scope=\"col\">Maintenance Task</th>\r\n                                        <th scope=\"col\">Who did the Work</th>\r\n                                        <th scope=\"col\">Date of Service</th>\r\n                                        <th scope=\"col\">Next Service Date</th>\r\n                                        <th scope=\"col\">Notes</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {/* same as prperties for each tr */} \r\n                                <Service equipName={equip.name} services={services} equipId={equip.id} locationId={equip.locationId}/>\r\n                            </Table>\r\n                            \r\n                            <AddService equipName={equip.name} equipId={equip.id} locationId={equip.locationId} serviceName={''} />\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n                </AccordionItem>\r\n            </div>\r\n        );\r\n    });\r\n    if(listofEquip!=null)\r\n        return(\r\n            <div>\r\n                <div className=\"card \">\r\n                    {listofEquip}\r\n                </div>\r\n                {/* add equipment */}\r\n                <AddEquipment locationId={props.locationId} locationName={props.locationName}/>\r\n            </div>\r\n        );\r\n    else\r\n        return(<div></div>);\r\n} \r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(WellEquipment));","import React from 'react';\r\n\r\nexport const Loading = () => {\r\n    return(\r\n        <div className=\"col-12\">\r\n            <span className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\"></span>\r\n            <p>Loading . . .</p>\r\n        </div>\r\n    );\r\n};","import React, {useState} from 'react';\r\nimport { Accordion } from 'react-light-accordion';\r\nimport 'react-light-accordion/demo/css/index.css';\r\n\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { TabContent, Nav, NavItem, NavLink, TabPane } from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport WellEquipment from './WellEquipment';   \r\nimport {Loading} from './LoadingComponent'; \r\nimport AddEquipment from './AddEquipment';\r\n\r\nfunction EquipmentRender(props){\r\n    if (props.isLoading) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">            \r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.errMess) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\"> \r\n                    <div className=\"col-12\">\r\n                        <h4>{props.errMess}</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.equip.length != 0) \r\n        return(\r\n            <WellEquipment \r\n                locationId={props.locationId}\r\n                locationName={props.name}\r\n                equipment={props.equip}\r\n                services={props.services}\r\n                postEquipment={props.postEquipment} \r\n            />\r\n        );\r\n    else\r\n        return(\r\n            <div>\r\n                <h3>No Equipment Available</h3>\r\n                <AddEquipment locationId={props.locationId} locationName={props.locationName}/>\r\n            </div>\r\n        );\r\n\r\n\r\n}\r\nconst WellTabs = (props) =>{\r\n    const [activeTab, setTab] = useState(props.tab);\r\n    if (props.isLoading) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">            \r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.errMess) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\"> \r\n                    <div className=\"col-12\">\r\n                        <h4>{props.errMess}</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.locations != null) \r\n    return(\r\n        <div className=\"container\">\r\n            {/* Breadcrumb */}\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem><Link to=\"/\">Home</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>{props.locations.name}</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                <h3>{props.locations.name}</h3>\r\n            </div>\r\n            </div>\r\n            {/* Equipment Table  */}\r\n            <div className=\"row row-content\">\r\n                <Nav tabs>\r\n                    <NavItem>\r\n                        <NavLink className={classnames({ active: activeTab === '1' })}\r\n                            onClick={() => { setTab('1'); }}\r\n                            >Well House</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink className={classnames({ active: activeTab === '2' })}\r\n                            onClick={() => { setTab('2'); }}\r\n                            >Chlorinator</NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n                <TabContent activeTab={activeTab}>\r\n                    {/* well house */}\r\n                    <TabPane tabId=\"1\">\r\n                        <Accordion atomic={false}>\r\n                            <EquipmentRender \r\n                                locationId={props.locations.locationId}\r\n                                locationName={props.locations.name}\r\n                                equip={props.equipment.filter(\r\n                                    (equip) => String(equip.wellHouse) === String(true))} \r\n                                isLoading={props.equipmentisLoading} \r\n                                errMess={props.equipmentErrMess}\r\n                                services={props.services}\r\n                                servicesLoading={props.servicesisLoading}\r\n                                servicesErrMess={props.servicesErrMess}\r\n                                postEquipment={props.postEquipment}\r\n\r\n                            />\r\n                        </Accordion>\r\n                    </TabPane>\r\n                    \r\n                    {/* Chlorinator */}\r\n                    <TabPane tabId=\"2\">\r\n                        <Accordion atomic={false}>\r\n                            <EquipmentRender \r\n                                locationId={props.locations.locationId}\r\n                                locationName={props.locations.name}\r\n                                equip={props.equipment.filter(\r\n                                    (equip) => String(equip.wellHouse) === String(false))} \r\n                                isLoading={props.equipmentisLoading} \r\n                                errMess={props.equipmentErrMess}\r\n                                services={props.services}\r\n                                servicesLoading={props.servicesisLoading}\r\n                                servicesErrMess={props.servicesErrMess}\r\n                                postEquipment={props.postEquipment}\r\n                            />\r\n                        </Accordion>\r\n                    </TabPane>\r\n                </TabContent>\r\n            </div>\r\n        </div>\r\n    );\r\n    else\r\n        return(\r\n            <div></div>\r\n        );            \r\n      \r\n}\r\n\r\nexport default WellTabs;","import React, {useState} from 'react';\r\nimport { Accordion } from 'react-light-accordion';\r\nimport 'react-light-accordion/demo/css/index.css';\r\n\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { TabContent, Nav, NavItem, NavLink, TabPane } from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport WellEquipment from './WellEquipment';   \r\nimport {Loading} from './LoadingComponent'; \r\n\r\nfunction EquipmentRender(props){\r\n    if (props.isLoading) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">            \r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.errMess) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\"> \r\n                    <div className=\"col-12\">\r\n                        <h4>{props.errMess}</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.equip != null) \r\n        return(\r\n            <WellEquipment equipment={props.equip}\r\n                services={props.services}\r\n                postEquipment={props.postEquipment} \r\n            />\r\n        );\r\n    else\r\n        return(\r\n            <React.Fragment>\r\n                <h3>No Equipment Available</h3>\r\n            </React.Fragment>\r\n        );\r\n\r\n\r\n}\r\nconst Booster = (props) =>{\r\n    const [activeTab, setTab] = useState(props.tab);\r\n    if (props.isLoading) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">            \r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.errMess) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\"> \r\n                    <div className=\"col-12\">\r\n                        <h4>{props.errMess}</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.locations != null) \r\n    return(\r\n        <div className=\"container\">\r\n            {/* Breadcrumb */}\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem><Link to=\"/\">Home</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>{props.locations.name}</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                <h3>{props.locations.name}</h3>\r\n            </div>\r\n            </div>\r\n            {/* Equipment Table  */}\r\n            <div className=\"row row-content\">\r\n            \r\n                {/* booster station */}\r\n                <Accordion atomic={false}>\r\n                    <EquipmentRender \r\n                        locationId={props.locations.locationId}\r\n                        locationName={props.locations.name}\r\n                        equip={props.equipment} \r\n                        isLoading={props.equipmentisLoading} \r\n                        errMess={props.equipmentErrMess}\r\n                        services={props.services}\r\n                        servicesLoading={props.servicesisLoading}\r\n                        servicesErrMess={props.servicesErrMess}\r\n                        postEquipment={props.postEquipment}\r\n\r\n                    />\r\n                </Accordion>\r\n                    \r\n                    \r\n            </div>\r\n        </div>\r\n    );\r\n    else\r\n        return(\r\n            <div></div>\r\n        );            \r\n      \r\n}\r\n\r\nexport default Booster;","import React, {Component} from 'react';\r\nimport { Navbar } from 'reactstrap';\r\nimport { BrowserRouter,Switch, Route,withRouter } from 'react-router-dom';\r\nimport NavNav from './nav';\r\nimport Home from './Home';\r\nimport WellTabs from './WellTabs';\r\nimport Booster from './Booster';\r\n\r\nimport { fetchLocations, postService, fetchEquipment, fetchService,postEquipment } from '../redux/ActionCreators';\r\nimport { connect } from 'react-redux';\r\n//import { actions } from 'react-redux-form';\r\n//import { TransitionGroup, CSSTransition } from 'react-transition-group';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    locations: state.locations,\r\n    equipment: state.equipment,\r\n    services: state.services\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n  postService: (dishId, rating, author, comment)=> dispatch(postService(dishId, rating, author, comment)),  \r\n  postEquipment:(id,locationId,wellHouse,name,installDate,horsePower,oilType,serial,greaseType)=>dispatch(postEquipment(id,locationId,wellHouse,name,installDate,horsePower,oilType,serial,greaseType)),\r\n  fetchEquipment: () => { dispatch(fetchEquipment())},\r\n  fetchLocations: () => { dispatch(fetchLocations())},\r\n  fetchService: () => { dispatch(fetchService())}\r\n});\r\n\r\nclass Main extends Component{\r\n\r\n    componentDidMount() {\r\n        this.props.fetchLocations();\r\n        this.props.fetchEquipment();\r\n        this.props.fetchService();\r\n    }\r\n    render(){\r\n        const WellWithId = ({match}) => {\r\n            console.log(\"in equipwithid \"+JSON.stringify(this.props.locations.locations));\r\n            return(\r\n                <WellTabs \r\n                    locations={this.props.locations.locations.filter(\r\n                        (location) => parseInt(location.id,10) === parseInt(match.params.id,10))[0]} \r\n                    isLoading={this.props.locations.isLoading}\r\n                    errMess={this.props.locations.errMess}\r\n                    tab='1'\r\n                    equipment={this.props.equipment.equipment.filter(\r\n                        (equip) => parseInt(equip.locationId) === parseInt(match.params.id,10))}\r\n                    equipmentisLoading={this.props.equipment.isLoading}\r\n                    equipmentErrMess={this.props.equipment.errMess}\r\n                    addEquipment={this.props.addEquipment}\r\n                    services={this.props.services.services.filter(\r\n                        (service) => parseInt(service.locationId) === parseInt(match.params.id,10))}\r\n                    servicesisLoading={this.props.services.isLoading}\r\n                    servicesErrMess={this.props.services.errMess}\r\n                    postEquipment={this.props.postEquipment}\r\n                />\r\n                \r\n            );\r\n            }\r\n            const BoosterWithId = ({match}) => {\r\n                console.log(\"in boosterwithid \"+JSON.stringify(this.props.locations.locations));\r\n                return(\r\n                    <Booster \r\n                        locations={this.props.locations.locations.filter(\r\n                            (location) => parseInt(location.id,10) === parseInt(match.params.id,10))[0]} \r\n                        isLoading={this.props.locations.isLoading}\r\n                        errMess={this.props.locations.errMess}\r\n                        equipment={this.props.equipment.equipment.filter(\r\n                            (equip) => parseInt(equip.locationId) === parseInt(match.params.id,10))}\r\n                        equipmentisLoading={this.props.equipment.isLoading}\r\n                        equipmentErrMess={this.props.equipment.errMess}\r\n                        addEquipment={this.props.addEquipment}\r\n                        services={this.props.services.services.filter(\r\n                            (service) => parseInt(service.locationId) === parseInt(match.params.id,10))}\r\n                        servicesisLoading={this.props.services.isLoading}\r\n                        servicesErrMess={this.props.services.errMess}\r\n                    />\r\n                    \r\n                );\r\n                }\r\n        return(\r\n            <div className=\"container\">\r\n                <Navbar light>\r\n                    <NavNav/>\r\n                </Navbar>\r\n                <BrowserRouter>\r\n                    <Switch>\r\n                        <Route path=\"/well/:id\" component={WellWithId}/>\r\n                        <Route path=\"/booster/:id\" component={BoosterWithId}/>\r\n                        <Route path=\"/\" render={Home} />\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\r\n","export const InitialNewEquip = {\r\n    name: '',\r\n    horsePower: '',\r\n    oilType: '',\r\n    serial: '',\r\n    greaseType: ''\r\n};\r\nexport const InitialNewService = {\r\n    serviceName: '',\r\n    name: '',\r\n    notes: '',\r\n    \r\n};","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const Equipment = (state = { isLoading: true,\r\n    errMess: null,\r\n    equipment:[]}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_EQUIPMENT:\r\n            return {...state, isLoading: false, errMess: null, equipment: action.payload};\r\n\r\n        case ActionTypes.EQUIPMENT_LOADING:\r\n            return {...state, isLoading: true, errMess: null, equipment: []}\r\n\r\n        case ActionTypes.EQUIPMENT_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const Locations = (state = { isLoading: true,\r\n    errMess: null,\r\n    locations:[]}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_LOCATIONS:\r\n            return {...state, isLoading: false, errMess: null, locations: action.payload};\r\n\r\n        case ActionTypes.LOCATIONS_LOADING:\r\n            return {...state, isLoading: true, errMess: null, locations: []}\r\n\r\n        case ActionTypes.LOCATIONS_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const Services = (state = { isLoading: true,\r\n    errMess: null,\r\n    services:[]}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_SERVICE:\r\n            return {...state, isLoading: false, errMess: null, services: action.payload};\r\n\r\n        case ActionTypes.SERVICE_LOADING:\r\n            return {...state, isLoading: true, errMess: null, services: []}\r\n\r\n        case ActionTypes.SERVICE_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport Main from './componets/Main';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { ConfigureStore } from './redux/configureStore';\r\nimport './App.css';\r\n\r\nconst store = ConfigureStore();\r\n\r\nclass App extends Component {\r\n  render(){\r\n    return (\r\n      <Provider store={store}>\r\n      <BrowserRouter>\r\n        <div className=\"App\">\r\n          <Main />\r\n        </div>\r\n      </BrowserRouter>\r\n    </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import {createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport { createForms } from 'react-redux-form';\r\nimport { InitialNewEquip, InitialNewService } from './forms';\r\nimport { Equipment } from './equipment';\r\nimport { Locations } from './locations';\r\nimport {Services} from './services';\r\n\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n            locations: Locations,\r\n            equipment:Equipment,\r\n            services: Services,\r\n            ...createForms({\r\n                newService: InitialNewService,\r\n                newEquip: InitialNewEquip\r\n            })\r\n        }),\r\n        applyMiddleware(thunk, logger)\r\n    );\r\n\r\n    return store;\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { AuthenticationContext, adalFetch, withAdalLogin } from 'react-adal';\r\n\r\nconst adalConfig = {\r\n tenant: 'ebba2929-765b-48f7-8c03-9b450ed099ba',\r\n clientId: '47ad89ca-350f-470e-a8f7-d39d5ca1df5c',\r\n endpoints: {\r\n     api: '47ad89ca-350f-470e-a8f7-d39d5ca1df5c'\r\n },\r\n apiUrl: 'https://bermuda.verawaterandpower.com',\r\n cacheLocation: 'localStorage'\r\n};\r\nexport const authContext = new AuthenticationContext(adalConfig);\r\nexport const adalApiFetch = (fetch, url, options) =>\r\n    adalFetch(authContext, adalConfig.endpoints.api, fetch, adalConfig.apiUrl + url, options);\r\nexport const withAdalLoginApi = withAdalLogin(authContext, adalConfig.endpoints.api);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'font-awesome/css/font-awesome.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { runWithAdal } from 'react-adal';\r\nimport { authContext } from './AuthConfig';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\n//const DO_NOT_LOGIN = false;\r\n//runWithAdal(authContext, () => {\r\n//    ReactDOM.render(<App />, document.getElementById('root'));\r\n     //Hot Module Replacement API\r\n//    if (module.hot) {\r\n//        module.hot.accept('./App.js', () => {\r\n//            const NextApp = require('./App').default;\r\n//            ReactDOM.render(<NextApp />, document.getElementById('root'));\r\n//        });\r\n//    }\r\n\r\n//}, DO_NOT_LOGIN);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}